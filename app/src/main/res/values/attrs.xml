<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright (C) 2020 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
-->
<resources>

  <!-- Elements that begin and end at rest use standard easing. Can either be
       in the format "cubic-bezier(x1, y1, x2, y2)" or "path(<path_data>)". -->
  <attr name="motionEasingStandard" format="string"/>
  <!-- In comparison to standard easing, emphasized easing draws extra attention
       at the end of an animation. Can either be in the format
       "cubic-bezier(x1, y1, x2, y2)" or "path(<path_data>)". -->
  <attr name="motionEasingEmphasized" format="string"/>
  <!-- Incoming elements are animated using decelerated easing, in which
       transitions begin at peak velocity and end at rest. Can either be in the
       format "cubic-bezier(x1, y1, x2, y2)" or "path(<path_data>)".-->
  <attr name="motionEasingDecelerated" format="string"/>
  <!-- Elements exiting a screen use accelerated easing, a transition in which
       the element starts at rest and ends at peak velocity. Can either be in
       the format "cubic-bezier(x1, y1, x2, y2)" or "path(<path_data>)". -->
  <attr name="motionEasingAccelerated" format="string"/>
  <!-- Linear easing is often used for simple fade animations. Can either be in
       the format "cubic-bezier(x1, y1, x2, y2)" or "path(<path_data>)".-->
  <attr name="motionEasingLinear" format="string"/>

  <!-- Elements with small transition areas, such as icons and selection
       controls, have short durations. -->
  <attr name="motionDurationShort1" format="integer"/>
  <!-- Elements with small transition areas, such as icons and selection
       controls, have short durations. -->
  <attr name="motionDurationShort2" format="integer"/>
  <!-- Elements with larger transition areas, such as bottom sheets and
       expanding chips, have slightly longer durations. -->
  <attr name="motionDurationMedium1" format="integer"/>
  <!-- Elements with larger transition areas, such as bottom sheets and
       expanding chips, have slightly longer durations. -->
  <attr name="motionDurationMedium2" format="integer"/>
  <!-- Animated elements that traverse a large portion of the screen have the
       longest durations. -->
  <attr name="motionDurationLong1" format="integer"/>
  <!-- Animated elements that traverse a large portion of the screen have the
       longest durations. -->
  <attr name="motionDurationLong2" format="integer"/>

  <!-- Defines whether certain transitions such as the Container Transform move
       along a straight (linear) path or arced path. Can also be in the format
       of generic path data. -->
  <attr name="motionPath" format="enum|string">
    <enum name="linear" value="0"/>
    <enum name="arc" value="1"/>
  </attr>

  <!-- Can be used in conjunction with the MaterialContainerTransform
       transition to provide a shape appearance for any arbitrary view, for the
       corner morph animation. This attribute should be set in a theme overlay
       which is then applied to the view. Useful for cases where a view has
       shaped corners but doesn't implement the Shapeable interface. -->
  <attr name="transitionShapeAppearance" format="reference"/>

  <declare-styleable name="SegmentProgressBar">
    <attr name="progressBar_width" format="dimension"/> <!-- 控件宽度 -->
    <attr name="progressBar_height" format="dimension"/><!-- 控件高度 -->

    <attr name="progressBar_size" format="integer"/><!-- 控件分段数量 -->
    <attr name="progressBar_maxValue" format="integer"/><!-- 控件progress最大值 -->
    <attr name="progressBar_segmentValue" format="integer"/><!-- 控件分段progress value -->
    <attr name="progressBar_progressValue" format="integer"/><!--  当前 progress value -->

    <attr name="progressBar_progressColor" format="color"/><!-- progress 进度条颜色 -->
    <attr name="progressBar_backgroundColor" format="color"/><!-- progress 背景 颜色 -->
    <attr name="progressBar_segmentColor" format="color"/><!-- progress 分段 颜色 -->
    <attr name="progressBar_intervalColor" format="color"/><!-- progress 分段间隔 颜色 -->

  </declare-styleable>

  <declare-styleable name="FoldTextView">
    <attr name="showTip" format="boolean" />  <!-- 是否展示提示 -->
    <attr name="showMaxLine" format="integer" />  <!-- 文本展示最大行数 -->
    <attr name="tipGravity" format="integer" /> <!-- 提示位置 -->
    <attr name="tipColor" format="reference|color" /> <!-- 提示颜色 -->
    <attr name="tagColor" format="reference|color" /> <!-- 标签颜色 -->
    <attr name="tipWithTag" format="boolean"/> <!-- 提示是否添加标签 -->
    <attr name="tipClickable" format="boolean" /> <!-- 提示可否点击 -->
    <attr name="foldText" format="string" /> <!-- 折叠提示语 -->
    <attr name="expandText" format="string" /> <!-- 展开提示语 -->
    <attr name="showTipAfterExpand" format="boolean" /> <!-- 展开后是否显示提示语 -->
  </declare-styleable>

</resources>
