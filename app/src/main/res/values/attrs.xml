<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright (C) 2020 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
-->
<resources>

  <!-- Elements that begin and end at rest use standard easing. Can either be
       in the format "cubic-bezier(x1, y1, x2, y2)" or "path(<path_data>)". -->
  <attr name="motionEasingStandard" format="string"/>
  <!-- In comparison to standard easing, emphasized easing draws extra attention
       at the end of an animation. Can either be in the format
       "cubic-bezier(x1, y1, x2, y2)" or "path(<path_data>)". -->
  <attr name="motionEasingEmphasized" format="string"/>
  <!-- Incoming elements are animated using decelerated easing, in which
       transitions begin at peak velocity and end at rest. Can either be in the
       format "cubic-bezier(x1, y1, x2, y2)" or "path(<path_data>)".-->
  <attr name="motionEasingDecelerated" format="string"/>
  <!-- Elements exiting a screen use accelerated easing, a transition in which
       the element starts at rest and ends at peak velocity. Can either be in
       the format "cubic-bezier(x1, y1, x2, y2)" or "path(<path_data>)". -->
  <attr name="motionEasingAccelerated" format="string"/>
  <!-- Linear easing is often used for simple fade animations. Can either be in
       the format "cubic-bezier(x1, y1, x2, y2)" or "path(<path_data>)".-->
  <attr name="motionEasingLinear" format="string"/>

  <!-- Elements with small transition areas, such as icons and selection
       controls, have short durations. -->
  <attr name="motionDurationShort1" format="integer"/>
  <!-- Elements with small transition areas, such as icons and selection
       controls, have short durations. -->
  <attr name="motionDurationShort2" format="integer"/>
  <!-- Elements with larger transition areas, such as bottom sheets and
       expanding chips, have slightly longer durations. -->
  <attr name="motionDurationMedium1" format="integer"/>
  <!-- Elements with larger transition areas, such as bottom sheets and
       expanding chips, have slightly longer durations. -->
  <attr name="motionDurationMedium2" format="integer"/>
  <!-- Animated elements that traverse a large portion of the screen have the
       longest durations. -->
  <attr name="motionDurationLong1" format="integer"/>
  <!-- Animated elements that traverse a large portion of the screen have the
       longest durations. -->
  <attr name="motionDurationLong2" format="integer"/>

  <!-- Defines whether certain transitions such as the Container Transform move
       along a straight (linear) path or arced path. Can also be in the format
       of generic path data. -->
  <attr name="motionPath" format="enum|string">
    <enum name="linear" value="0"/>
    <enum name="arc" value="1"/>
  </attr>

  <!-- Can be used in conjunction with the MaterialContainerTransform
       transition to provide a shape appearance for any arbitrary view, for the
       corner morph animation. This attribute should be set in a theme overlay
       which is then applied to the view. Useful for cases where a view has
       shaped corners but doesn't implement the Shapeable interface. -->
  <attr name="transitionShapeAppearance" format="reference"/>

  <declare-styleable name="SegmentProgressBar">
    <attr name="progressBar_width" format="dimension"/> <!-- 控件宽度 -->
    <attr name="progressBar_height" format="dimension"/><!-- 控件高度 -->

    <attr name="progressBar_size" format="integer"/><!-- 控件分段数量 -->
    <attr name="progressBar_maxValue" format="integer"/><!-- 控件progress最大值 -->
    <attr name="progressBar_segmentValue" format="integer"/><!-- 控件分段progress value -->
    <attr name="progressBar_progressValue" format="integer"/><!--  当前 progress value -->

    <attr name="progressBar_progressColor" format="color"/><!-- progress 进度条颜色 -->
    <attr name="progressBar_backgroundColor" format="color"/><!-- progress 背景 颜色 -->
    <attr name="progressBar_segmentColor" format="color"/><!-- progress 分段 颜色 -->
    <attr name="progressBar_intervalColor" format="color"/><!-- progress 分段间隔 颜色 -->

  </declare-styleable>

  <declare-styleable name="FoldTextView">
    <attr name="showTip" format="boolean" />  <!-- 是否展示提示 -->
    <attr name="showMaxLine" format="integer" />  <!-- 文本展示最大行数 -->
    <attr name="tipGravity" format="integer" /> <!-- 提示位置 -->
    <attr name="tipColor" format="reference|color" /> <!-- 提示颜色 -->
    <attr name="tagColor" format="reference|color" /> <!-- 标签颜色 -->
    <attr name="tipWithTag" format="boolean"/> <!-- 提示是否添加标签 -->
    <attr name="tipClickable" format="boolean" /> <!-- 提示可否点击 -->
    <attr name="foldText" format="string" /> <!-- 折叠提示语 -->
    <attr name="expandText" format="string" /> <!-- 展开提示语 -->
    <attr name="showTipAfterExpand" format="boolean" /> <!-- 展开后是否显示提示语 -->
  </declare-styleable>

  <declare-styleable name="ShadowLayout">
    <!-- 1、关于阴影 -->
    <!--阴影：是否要显示阴影，可能有只想用shape和selector功能，不想要阴影-->
    <attr name="hl_shadowHidden" format="boolean" />
    <!--阴影：阴影颜色-->
    <attr name="hl_shadowColor" format="color" />
    <!--阴影：阴影的扩散范围(也可以理解为扩散程度)-->
    <attr name="hl_shadowLimit" format="dimension" />
    <!--控件区域是否对称，默认是对称。不对称的话，那么控件区域随着阴影区域走-->
    <attr name="hl_shadowSymmetry" format="boolean" />
    <!--阴影：x轴的偏移量-->
    <attr name="hl_shadowOffsetX" format="dimension" />
    <!--阴影：y轴的偏移量-->
    <attr name="hl_shadowOffsetY" format="dimension" />
    <!--阴影：左边是否隐藏阴影-->
    <attr name="hl_shadowHiddenLeft" format="boolean" />
    <!--阴影：右边是否隐藏阴影-->
    <attr name="hl_shadowHiddenRight" format="boolean" />
    <!--阴影：上边是否隐藏阴影-->
    <attr name="hl_shadowHiddenTop" format="boolean" />
    <!--阴影：下面是否隐藏阴影-->
    <attr name="hl_shadowHiddenBottom" format="boolean" />


    <!-- 2、关于圆角 -->
    <!--圆角：统一大小，其中包括了阴影，shape、背景图、stroke边框圆角-->
    <attr name="hl_cornerRadius" format="dimension" />
    <!--圆角：左上圆角。设置后会忽略hl_cornerRadius的值-->
    <attr name="hl_cornerRadius_leftTop" format="dimension" />
    <!--圆角：右上圆角。同上-->
    <attr name="hl_cornerRadius_rightTop" format="dimension" />
    <!--圆角：左下圆角。同上-->
    <attr name="hl_cornerRadius_leftBottom" format="dimension" />
    <!--圆角：右下圆角。同上-->
    <attr name="hl_cornerRadius_rightBottom" format="dimension" />


    <!-- 3、关于shape及selector -->
    <!-- shape及selector样式：pressed、sectored -->
    <attr name="hl_shapeMode">
      <enum name="pressed" value="1" />
      <enum name="selected" value="2" />
      <enum name="ripple" value="3" />
    </attr>

    <!-- 为false的默认背景，可单独使用-->
    <attr name="hl_layoutBackground" format="reference|color" />
    <!-- 为true的默认背景，必须搭配hl_layoutBackground属性使用。否则报错-->
    <attr name="hl_layoutBackground_true" format="reference|color" />

    <!-- stroke样式，stroke的宽度-->
    <attr name="hl_strokeWith" format="dimension" />
    <!-- 为false时，默认的stoke颜色值，可单独使用-->
    <attr name="hl_strokeColor" format="color" />
    <!-- 为true时，默认的stoke颜色值，必须搭配hl_strokeColor属性使用。否则报错-->
    <attr name="hl_strokeColor_true" format="color" />


    <!-- 这里最终舍弃了系统clickable的方案，因为系统系统主动设置setOnClickListener后，会主动设置成true,所以这里采用自定义 -->
    <attr name="clickable" format="boolean" />
    <!-- hl_clickable为false时，要展示的图片或颜色-->
    <attr name="hl_layoutBackground_clickFalse" format="reference|color" />


    <!-- 4、关于填充的渐变色 -->
    <!-- 要知道，如果设置了渐变色。那么将以渐变色为主。hl_layoutBackground属性将无效 -->
    <!-- 渐变的起始颜色 -->
    <attr name="hl_startColor" format="color" />
    <!-- 渐变的中间颜色 -->
    <attr name="hl_centerColor" format="color" />
    <!-- 渐变的终止颜色 -->
    <attr name="hl_endColor" format="color" />
    <!-- 渐变角度，默认值为0-->
    <attr name="hl_angle" format="integer" />


    <!-- 5、绑定一个TextView，在点击按钮时，有可能有颜色变化 -->
    <attr name="hl_bindTextView" format="reference" />
    <attr name="hl_textColor" format="color" />
    <attr name="hl_textColor_true" format="color" />
    <attr name="hl_text" format="string" />
    <attr name="hl_text_true" format="string" />


  </declare-styleable>

</resources>
